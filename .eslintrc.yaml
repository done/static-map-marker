# ESLint
# @version 1.0.0
# @author Daniel Domermark
# 0 = "off", 1 = "warn" (will not affect exit code), 2 = "error" (will affect exit code)

parserOptions: 
    ecmaVersion: 6
    sourceType: module
    ecmaFeatures:
        - binaryLiterals: false           # enable binary literals
          blockBindings: true             # enable let and const (aka block bindings)
          defaultParams: true             # enable default function parameters
          forOf: false                    # enable for-of loops
          modules: true                   # enable modules

env:
    browser: true       # browser global variables.
    node: false         # Node.js global variables and Node.js-specific rules.
    amd: false          # defines require() and define() as global variables as per the amd spec.
    mocha: true         # adds all of the Mocha testing global variables.
    jasmine: false      # adds all of the Jasmine testing global variables for version 1.3 and 2.0.
    phantomjs: false    # phantomjs global variables.
    jquery: false       # jquery global variables.
    prototypejs: false  # prototypejs global variables.
    shelljs: false      # shelljs global variables.


globals:
    google: true

plugins: 

rules:

    # Possible errors
    comma-dangle: 0                                 # disallow trailing commas in object literals
    no-cond-assign: 1                               # disallow assignment operators in conditional statements
    no-console: 0                                   # disallow the use of console
    no-constant-condition: 1                        # disallow constant expressions in conditions
    no-control-regex: 1                             # disallow control characters in regular expressions
    no-debugger: 2                                  # disallow the use of debugger
    no-dupe-args: 2                                 # disallow duplicate arguments in function definitions
    no-dupe-keys: 2                                 # disallow duplicate keys in object literals
    no-duplicate-case: 2                            # disallow duplicate case labels
    no-empty:                                       # disallow empty block statements
        - 1
        - allowEmptyCatch: true
    no-empty-character-class: 1                     # disallow empty character classes in regular expressions
    no-ex-assign: 2                                 # disallow reassigning exceptions in catch clauses
    no-extra-boolean-cast: 1                        # disallow unneccessary boolean casts
    no-extra-parens: 0                              # disallow unneccessary parentheses
    no-extra-semi: 1                                # disallow unneccessary semicolons
    no-func-assign: 1                               # disallow reassigning function declarations
    no-inner-declarations: 1                        # disallow function or var declarations in nested blocks
    no-invalid-regexp: 1                            # disallow iinvalid regular expressoins strings in RegExp constructors
    no-irregular-whitespace:                        # disallow irregular whitespace outside of strings and comments
        - 1
        - skipComments: true
    no-negated-in-lhs: 1                            # disallow negating the left operand in in expressions
    no-obj-calls: 1                                 # disallow calling global object properties as functions
    no-regex-spaces: 1                              # disallow multiple spaces in regular expression literals
    no-sparse-arrays: 1                             # disallow sparse arrays
    no-unexpected-multiline: 1                      # disallow confusing multiline expressions
    no-unreachable: 1                               # disallow unreachable code after return, throw, continue, and break statements
    no-unsafe-finally: 1                            # disallow control flow statements in finally blocks
    use-isnan: 1                                    # require calls to isNaN() when checking for NaN
    valid-jsdoc: 1                                  # enforce valid JSDoc comments
    valid-typeof: 1                                 # enforce comparing typeof expressions against valid strings

    # Best practices
    accessor-pairs: 1                               # enforces getter/setter pairs in objects
    array-callback-return: 1                        # encorce return statements on callbacks of array methods
    block-scoped-var: 1                             # treat var statements as if they were block scoped (off by default)
    complexity: 1                                   # specify the maximum cyclomatic complexity allowed in a program (off by default)
    consistent-return: 1                            # require return statements to either always or never specify values
    curly:                                          # specify curly brace conventions for all control statements: http://eslint.org/docs/rules/curly
        - 0
        - multi-or-nest
    default-case: 1                                 # require default case in switch statements (off by default)
    dot-location:                                   # enforce newline before and after dot: http://eslint.org/docs/rules/dot-location
        - 1
        - property
    dot-notation:                                   # encourages use of dot notation whenever possible: http://eslint.org/docs/rules/dot-notation
        - 1 
        - allowPattern: '^[a-z]+(_[a-z]+)+$'
          allowKeywords: false
    eqeqeq: 1                                       # require the use of === and !==
    guard-for-in: 1                                 # make sure for-in loops have an if statement (off by default)
    no-alert: 0                                     # disallow the use of alert confirm and prompt
    no-caller: 1                                    # disallow use of arguments.caller or arguments.callee
    no-case-declarations: 1                         # disallow lexical declarations in case clauses
    no-div-regex: 0                                 # disallow division operators explicitly at beginning of regular expression (off by default)
    no-else-return: 1                               # disallow else after a return in an if (off by default)
    no-empty-function: 1                            # disallow empty functions
    no-empty-pattern: 1                             # disallow empty destructuring patterns
    no-eq-null: 1                                   # disallow comparisons to null without a type-checking operator (off by default)
    no-eval: 1                                      # disallow use of eval()
    no-extend-native: 1                             # disallow adding to native types
    no-extra-bind: 1                                # disallow unnecessary calls to .bind()
    no-extra-label: 1                               # disallow unnecessary labels
    no-fallthrough: 1                               # disallow fallthrough of case statements
    no-floating-decimal: 0                          # disallow the use of leading or trailing decimal points in numeric literals (off by default)
    no-implicit-coercion: 0                         # disallow shorthand type conversions
    no-implicit-globals: 0                          # disallow var and named function declarations in the global scope
    no-implied-eval: 0                              # disallow use of eval()-like methods
    no-invalid-this: 1                              # disallow this keywords outside of classes or class-like objects
    no-iterator: 0                                  # disallow usage of __iterator__ property
    no-labels: 0                                    # disallow use of labeled statements
    no-lone-blocks: 0                               # disallow unnecessary nested blocks
    no-loop-func: 0                                 # disallow creation of functions within loops
    no-multi-spaces:                                # disallow use of multiple spaces
        - 1
        - exceptions:
            VariableDeclarator: true
            ImportDeclaration: true
    no-multi-str: 0                                 # disallow use of multiline strings
    no-native-reassign: 1                           # disallow reassignments of native objects
    no-new: 0                                       # disallow use of new operator when not part of the assignment or comparison
    no-new-func: 0                                  # disallow use of new operator for Function object
    no-new-wrappers: 0                              # disallows creating new instances of String Number and Boolean
    no-octal: 1                                     # disallow use of octal literals
    no-octal-escape: 0                              # disallow use of octal escape sequences in string literals such as var foo = Copyright \251;
    no-param-reassign: 0                            # disallow reassigning function parameters
    no-proto: 1                                     # disallow usage of __proto__ property
    no-redeclare: 1                                 # disallow declaring the same variable more then once
    no-return-assign: 0                             # disallow use of assignment in return statement
    no-script-url: 0                                # disallow use of javascript: urls.
    no-self-assign: 1                               # disallow assignments where both sides are exactly the same
    no-self-compare: 0                              # disallow comparisons where both sides are exactly the same (off by default)
    no-sequences: 0                                 # disallow use of comma operator
    no-throw-literal: 0                             # disallow throwing literals as exceptions
    no-unmodified-loop-conditions: 0                # disallow unmodified loop conditions
    no-unused-expressions: 0                        # disallow usage of expressions in statement position
    no-unused-labels: 1                             # disallow unused labels
    no-useless-call: 0                              # disallow unnecessary calls to .call() and .apply()
    no-useless-concat: 0                            # disallow unnecessary concatenation of literals or template literals
    no-useless-escape: 0                            # disallow unnecessary escape characters
    no-void: 0                                      # disallow use of void operator (off by default)
    no-warning-comments: 0                          # disallow usage of configurable warning terms in comments e.g. TODO or FIXME (off by default)
    no-with: 0                                      # disallow use of the with statement
    radix: 0                                        # require use of the second argument for parseInt() (off by default)
    vars-on-top: 1                                  # requires to declare all vars on top of their containing scope (off by default)
    wrap-iife: 0                                    # require immediate function invocation to be wrapped in parentheses (off by default)
    yoda: 1                                         # require or disallow Yoda conditions

    # Strict mode
    strict: 1

    # Variables
    init-declarations: 0                            # require or disallow initialization in var declarations
    no-catch-shadow: 0                              # disallow catch clause parameters from shadowing variables in the outer scope
    no-delete-var: 1                                # disallow deleting variables 
    no-label-var: 0                                 # disallow labels that share a name with a variable
    no-restricted-globals: 0                        # disallow specified global variables
    no-shadow: 0                                    # disallow var declarations from shadowing variables in the outer scope
    no-shadow-restricted-names: 0                   # disallow identifiers from shadowing restricted names
    no-undef: 1                                     # disallow the use of undeclared variables unless mentioned in /*global */ comments 
    no-undef-init: 0                                # disallow initializing variables to undefined
    no-undefined: 0                                 # disallow the use of undefined as an identifier
    no-unused-vars: 1                               # disallow unused variables 
    no-use-before-define: 0                         # disallow the use of variables before they are defined

    # Node.js and CommonJS
    callback-return: 0                              # require return statements after callbacks
    global-require: 0                               # require require() calls to be placed at top-level module scope
    handle-callback-err: 0                          # require error handling in callbacks
    no-mixed-requires: 0                            # disallow require calls to be mixed with regular var declarations
    no-new-require: 0                               # disallow new operators with calls to require
    no-path-concat: 0                               # isallow string concatenation with __dirname and __filename
    no-process-env: 0                               # disallow the use of process.env
    no-process-exit: 0                              # disallow the use of process.exit()
    no-restricted-modules: 0                        # disallow specified modules when loaded by require
    no-sync: 0                                      # disallow synchronous methods

    # Stylistic Issues
    array-bracket-spacing: 0                        # enforce consistent spacing inside array brackets 
    block-spacing: 1                                # enforce consistent spacing inside single-line blocks 
    brace-style:                                    # enforce consistent brace style for blocks
        - 1
        - '1tbs'
        - allowSingleLine: true
    camelcase: 1                                    # enforce camelcase naming convention
    comma-spacing: 0                                # enforce consistent spacing before and after commas 
    comma-style: 0                                  # enforce consistent comma style
    computed-property-spacing: 0                    # enforce consistent spacing inside computed property brackets 
    consistent-this: 0                              # enforce consistent naming when capturing the current execution context
    eol-last: 0                                     # enforce at least one newline at the end of files 
    func-names: 0                                   # enforce named function expressions
    func-style: 0                                   # enforce the consistent use of either function declarations or expressions
    id-blacklist: 0                                 # disallow specified identifiers
    id-length: 0                                    # enforce minimum and maximum identifier lengths
    id-match: 0                                     # require identifiers to match a specified regular expression
    indent: 0                                       # enforce consistent indentation 
    jsx-quotes: 0                                   # enforce the consistent use of either double or single quotes in JSX attributes 
    key-spacing: 0                                  # enforce consistent spacing between keys and values in object literal properties
    keyword-spacing: 0                              # enforce consistent spacing before and after keywords 
    linebreak-style: 0                              # enforce consistent linebreak style 
    lines-around-comment: 0                         # require empty lines around comments
    max-depth: 0                                    # enforce a maximum depth that blocks can be nested
    max-len:                                        # enforce a maximum line length
        - 0
        - code: 80
          ignoreUrls: true
    max-nested-callbacks: 0                         # enforce a maximum depth that callbacks can be nested
    max-params: 0                                   # enforce a maximum number of parameters in function definitions
    max-statements: 0                               # enforce a maximum number of statements allowed in function blocks
    max-statements-per-line: 0                      # enforce a maximum number of statements allowed per line
    new-cap: 1                                      # require constructor function names to begin with a capital letter
    new-parens: 1                                   # require parentheses when invoking a constructor with no arguments
    newline-after-var: 0                            # require or disallow an empty line after var declarations
    newline-before-return: 0                        # require an empty line before return statements
    newline-per-chained-call: 1                     # require a newline after each call in a method chain
    no-array-constructor: 1                         # disallow Array constructors
    no-bitwise: 0                                   # disallow bitwise operators
    no-continue: 0                                  # disallow continue statements
    no-inline-comments: 0                           # disallow inline comments after code
    no-lonely-if: 0                                 # disallow if statements as the only statement in else blocks
    no-mixed-spaces-and-tabs: 0                     # disallow mixed spaces and tabs for indentation 
    no-multiple-empty-lines: 0                      # disallow multiple empty lines
    no-negated-condition: 0                         # disallow negated conditions
    no-nested-ternary: 0                            # disallow nested ternary expressions
    no-new-object: 1                                # disallow Object constructors
    no-plusplus: 0                                  # disallow the unary operators ++ and --
    no-restricted-syntax: 0                         # disallow specified syntax
    no-spaced-func: 0                               # disallow spacing between function identifiers and their applications 
    no-ternary: 0                                   # disallow ternary operators
    no-trailing-spaces: 0                           # disallow trailing whitespace at the end of lines 
    no-underscore-dangle: 0                         # disallow dangling underscores in identifiers
    no-unneeded-ternary: 0                          # disallow ternary operators when simpler alternatives exist
    no-whitespace-before-property: 0                # disallow whitespace before properties 
    object-curly-spacing: 0                         # enforce consistent spacing inside braces 
    one-var: 1                                      # enforce variables to be declared either together or separately in functions
    one-var-declaration-per-line: 0                 # require or disallow newlines around var declarations
    operator-assignment: 0                          # require or disallow assignment operator shorthand where possible
    operator-linebreak: 0                           # enforce consistent linebreak style for operators
    padded-blocks: 0                                # require or disallow padding within blocks
    quote-props: 0                                  # require quotes around object literal property names
    quotes: 0                                       # enforce the consistent use of either backticks, double, or single quotes 
    require-jsdoc: 0                                # require JSDoc comments
    semi: 1                                         # require or disallow semicolons instead of ASI 
    semi-spacing: 0                                 # enforce consistent spacing before and after semicolons 
    sort-vars: 0                                    # require variables within the same declaration block to be sorted
    space-before-blocks: 1                          # enforce consistent spacing before blocks 
    space-before-function-paren: 0                  # enforce consistent spacing before function definition opening parenthesis 
    space-in-parens: 0                              # enforce consistent spacing inside parentheses 
    space-infix-ops: 0                              # require spacing around operators 
    space-unary-ops: 0                              # enforce consistent spacing before or after unary operators 
    spaced-comment: 0                               # enforce consistent spacing after the // or /* in a comment 
    wrap-regex: 0                                   # require parenthesis around regex literals

    # ECMAScript 6 (ES2015)
    arrow-body-style: 0                             # require braces around arrow function bodies
    arrow-parens: 0                                 # require parentheses around arrow function arguments
    arrow-spacing: 0                                # enforce consistent spacing before and after the arrow in arrow functions 
    constructor-super: 1                            # require super() calls in constructors 
    generator-star-spacing: 0                       # enforce consistent spacing around * operators in generator functions 
    no-class-assign: 1                              # disallow reassigning class members 
    no-confusing-arrow: 0                           # disallow arrow functions where they could be confused with comparisons
    no-const-assign: 1                              # disallow reassigning const variables 
    no-dupe-class-members: 1                        # disallow duplicate class members 
    no-duplicate-imports: 1                         # disallow duplicate module imports
    no-new-symbol: 1                                # disallow new operators with the Symbol object 
    no-restricted-imports: 0                        # disallow specified modules when loaded by import
    no-this-before-super: 1                         # disallow this/super before calling super() in constructors 
    no-useless-computed-key: 0                      # disallow unnecessary computed property keys in object literals
    no-useless-constructor: 0                       # disallow unnecessary constructors
    no-var: 0                                       # require let or const instead of var
    object-shorthand: 0                             # require or disallow method and property shorthand syntax for object literals
    prefer-arrow-callback: 0                        # require arrow functions as callbacks
    prefer-const: 1                                 # require const declarations for variables that are never reassigned after declared
    prefer-reflect: 0                               # require Reflect methods where applicable
    prefer-rest-params: 0                           # require rest parameters instead of arguments
    prefer-spread: 0                                # require spread operators instead of .apply()
    prefer-template: 0                              # require template literals instead of string concatenation
    require-yield: 0                                # require generator functions to contain yield
    sort-imports: 0                                 # enforce sorted import declarations within modules
    template-curly-spacing: 0                       # require or disallow spacing around embedded expressions of template strings 
    yield-star-spacing: 0                           # require or disallow spacing around the * in yield* expressions 
